html,
body,
#root {
  height: 100%;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif;
  margin: 0;
  /* margin: auto;
  max-width: 38rem;
  padding: 2rem; */
  background-color: rgb(
    10 10 10 / 0.5
  ); /* TODO: consider setting this within the window's backgroundColor */
  color: rgb(230 230 230);
}

#root {
  display: flex;
  flex-direction: column;
}

.dragRegion {
  /* height: 38px; */
  /* height: 42px; */
  flex: 0 0 42px; /* flex-shrink needs to be 0, or else it shrinks */
  /* background-color: blue; */
  -webkit-app-region: drag;
  /* background-color: rgb(0 0 0 / 0.1); */
  /* background-color: linear-gradient(
    to bottom,
    rgb(0 0 0 / 0.1),
    80%,
    transparent
  ); */
  background-image: linear-gradient(
    to bottom,
    rgb(0 0 0 / 0.1),
    37px,
    transparent
  );
}

.noteContent {
  /* flex-grow: 1; */
  /* outline: none; */
  /* padding: 15px 20px; */
  /* background-color: blue; */
  overflow-y: auto;
  /* scrollbar-color: gray transparent; */
  scrollbar-color: rgb(100 100 100) transparent;
  scrollbar-width: thin;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  position: relative;
}

/* ::-webkit-scrollbar {
  background: rgb(0 0 255);
  width: 20px;
} */

/* ::-webkit-scrollbar-thumb:hover {
  background: rgb(0 0 255);
  scrollbar-color: blue transparent;
} */

/* .noteContent * {
  margin: 0;
}

.noteContent p {
  margin: 3px 0;
  display: flow-root;
  * display: inline-block; *
}

.noteContent p::after {
  * ensure all the empty paragraphs still have minimum height *
  content: "\00a0";
} */

/* .noteContent p.section {
  display: block;
} */

.blockGroup {
  position: relative;
  display: flex;
  transition: opacity 0.1s, background-color 0.1s;
  animation: blockGrowIn 0.1s;
}

/* .blockGroup.failMove {
  background-color: red;
  } */

.blockGroup.invalidMove {
  opacity: 0.5;
}

.blockGroup.invalidMove .blockGroupPreview {
  display: none;
}

.blockGroup.failMove {
  background-color: rgb(255 0 0 / 0.5);
}

.blockMarker {
  position: absolute;
  width: 24px;
  height: calc(100% - 15px);
  top: 50%;
  left: 0;
  /* background-color: red; */
  transform: translateY(-50%);
  z-index: 3;
  /* background-color: rgb(255 0 0 / 0.5); */
  animation: blockMarkerSlideIn 0.2s ease-out;
}

.blockMarkerInner {
  position: absolute;
  background-color: rgb(211 211 211);
  /* background: linear-gradient(
    to bottom,
    transparent,
    rgb(211 211 211 / 0.3) 5px,
    rgb(211 211 211 / 0.3) calc(100% - 5px),
    transparent
  ); */
  box-shadow: 0 0 4px 1px rgb(211 211 211);
  /* height: calc(100% - 15px); */
  height: 100%;
  /* width: 3px; */
  width: 100%;
  /* border-radius: 1px; */
  /* border-radius: 0 3px 3px 0; */
  border-radius: 3px;

  cursor: pointer;

  transition: opacity 0.1s, transform 0.1s;

  opacity: 0.3;

  /* top: 50%;
  left: 0px;
  transform: translateY(-50%); */
}

.blockGroup.focus .blockMarkerInner,
.blockMarker.moving .blockMarkerInner {
  opacity: 1;
}

.blockMarker.moving {
  position: fixed;
  z-index: 100;
}

/* .blockMarker.moving::before { */
/* content: ""; */
.blockMarkerOverlay {
  position: fixed;
  /* background-color: blue; */
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  z-index: 99;
}

.blockMarker:not(:hover, .moving) .blockMarkerInner {
  transform: translateX(calc(-100% + 4px));
}

.blockGroup.focus .blockMarker:not(:hover, .moving) .blockMarkerInner {
  transform: translateX(calc(-100% + 8px));
}

.blockMarker:not(.moving):hover .blockMarkerInner {
  /* background-color: red; */
  transform: translateX(calc(-100% + 12px));
}

.blockMarker.moving .blockMarkerInner {
  transform: translateX(0);
}

.blockGroupPreview {
  display: flex;
  position: relative;
  flex-basis: 0;
  flex-shrink: 0;
  /* background-color: red; */
  /* padding: 15px 20px; */
  /* outline: 2px solid rgb(173 216 230 / 0.3);
  background-image: repeating-linear-gradient(
    315deg,
    rgb(173 216 230 / 0.1) 0,
    rgb(173 216 230 / 0.1) 2px,
    transparent 2px,
    transparent 4px
  );
  border-radius: 4px; */
}

.blockGroupPreview::before {
  content: "";
  position: absolute;
  top: 6px;
  left: 8px;
  width: calc(100% - 16px);
  height: calc(100% - 12px);
  /* margin: 5px 10px; */
  box-sizing: border-box;
  outline: 2px solid rgb(173 216 230 / 0.3);
  background-image: repeating-linear-gradient(
    315deg,
    rgb(173 216 230 / 0.1) 0,
    rgb(173 216 230 / 0.1) 2px,
    transparent 2px,
    transparent 4px
  );
  border-radius: 4px;
}

.blockPreview {
  /* padding: 15px 20px; */
  flex: 1 0 0;
  /* overflow-wrap: break-word; */
  /* margin: 5px 10px; */
  /* width: calc(50% - 20px);
  height: calc(100% - 10px);
  padding: 10px 10px;
  box-sizing: border-box;
  top: 5px; */
}

/* .blockPreview.left {
  left: 10px;
}

.blockPreview.right {
  right: 10px;
} */

.block {
  position: relative;
  /* pointer-events: none; */
  /* box-sizing: border-box; */
  flex: 1 0 0;
  transition: background-color 0.1s;
}

/* TODO: maybe consider adding a similar divider between block groups */
.block + .block::after,
.block + .blockGroupPreview::after,
.blockGroupPreview + .block::after {
  content: "";
  position: absolute;
  pointer-events: none;
  width: 1px;
  height: calc(100% - 20px);
  left: 0;
  top: 50%;
  background-color: rgb(211 211 211 / 0.3);
  transform: translate(-50%, -50%);
}

.blockGroup ~ .blockGroup::after {
  content: "";
  position: absolute;
  pointer-events: none;
  width: calc(100% - 40px);
  height: 1px;
  left: 50%;
  top: 0;
  background-color: rgb(211 211 211 / 0.3);
  transform: translate(-50%, -50%);
  transition: opacity 0.1s;
}

.blockGroup
  + .blockAddContainer:has(.blockAddRegion:hover, .blockAdd:hover)
  + .blockGroup::after {
  opacity: 0;
}

.blockEditable {
  /* pointer-events: auto; */
  font-family: inherit;
  color: inherit;
  background-color: transparent;
  border: none;
  outline: none;
  resize: none;
  /* padding: 15px 20px; */
  width: 100%;
  min-height: 100%;
  /* box-sizing: border-box; */
  overflow: hidden;
  /* flex: 1 0 0; */
  /* flex-shrink: 0; */
}

.block[data-type="text"] .blockEditable,
.measureElem[data-type="text"] {
  font-size: 1em;
}

.block[data-type="header"] .blockEditable,
.measureElem[data-type="header"] {
  font-size: 1.4em;
  font-weight: bold;
}

.blockPreview,
.blockEditable,
.measureElem {
  padding: 15px 20px;
  box-sizing: border-box;
  overflow-wrap: break-word;
}

.measureElem {
  /* content: "\00a0"; */
  position: fixed;
  top: 0;
  left: 0;
  visibility: hidden;
}

/* .measureElem::after {
  content: "\00a0";
} */

/* TODO: make this "soft" on the left and right sides too. consider using box-shadow instead of gradient */
/* ^ could also consider adding a focus class to focused blocks, and then using ::before on that */
/* .blockEditable:focus::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; */
.blockEditable:focus {
  background-image: linear-gradient(
    to bottom,
    transparent,
    rgb(0 0 0 / 0.1) 10px,
    rgb(0 0 0 / 0.1) calc(100% - 10px),
    transparent
  );
  /* box-shadow: 0 0 10px rgb(0 0 0 / 0.1); */
}

.blockAddContainer:first-of-type {
  position: relative;
  top: 10px;
}

.blockAddRegion {
  position: absolute;
  z-index: 1;
  /* background-color: blue; */
  height: 25px;
  width: 100%;
  transform: translateY(-50%);
}

.blockAddRegion,
.blockAdd,
.blockAddInnerInline {
  cursor: pointer;
}

/* .blockAddRegion:hover + .blockAdd,
.blockAdd:hover {
  opacity: 0.5;
} */

.blockAddRegion:hover + .blockAdd .blockAddInner:not(:hover),
.blockAddRegion:hover + .blockAdd::before,
.blockAddRegion:hover + .blockAdd::after,
.blockAdd:hover .blockAddInner:not(:hover),
.blockAdd:hover::before,
.blockAdd:hover::after {
  opacity: 0.5;
}

.blockAdd {
  /* position: absolute; */
  position: relative;
  flex-shrink: 0;
  height: 0px;
  overflow: visible;
  /* opacity: 0; */
  transition: opacity 0.1s;
  z-index: 2;
  /* left: 50%; */
  /* width: 100%; */
  /* transform: translate(-50%, -50%); */
  /* background-color: white; */
}

/* .blockAdd:hover {
  opacity: 0.5;
} */

.blockAdd::before {
  content: "";
  position: absolute;
  background-color: lightgray;
  height: 2px;
  width: 45%;
  left: 25%;
  top: 50%;
  transform: translateX(-50%);
  border-radius: 1px;
  opacity: 0;
  transition: opacity 0.1s;
  /* flex-shrink: 0; */
}

.blockAdd::after {
  content: "";
  position: absolute;
  background-color: lightgray;
  height: 2px;
  width: 45%;
  right: 25%;
  top: 50%;
  transform: translateX(50%);
  border-radius: 1px;
  opacity: 0;
  transition: opacity 0.1s;
  /* flex-shrink: 0; */
}

.noteContent.moving .blockAddContainerInline {
  display: none;
}

.blockAddContainerInline {
  position: absolute;
  z-index: 2;
  /* z-index: -1; */
  pointer-events: none;
  /* right: 0; */
  /* right: 5px; */
  /* top: 50%;
  transform: translateY(-50%); */
  width: 75px;
  height: 30px;
  /* background-color: blue; */
}

.blockAddContainerInline.left {
  left: 24px;
  top: 50%;
  /* bottom: 5px; */
  width: 25px;
  height: 25px;
  transform: translateY(-50%);
}

.blockAddContainerInline.middle,
.blockAddContainerInline.right {
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

/* .blockAddContainerVertical.left .blockAddInnerVertical {
  left: 20px;
  top: 50%;
  transform: translateY(-50%);
} */

.blockAddContainerInline.left .blockAddInnerInline {
  /* left: 20px; */
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

.blockAddContainerInline.middle .blockAddInnerInline {
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
}

.blockAddContainerInline.right {
  right: 0;
  top: 50%;
  transform: translate(50%, -50%);
}

.blockAddContainerInline.right .blockAddInnerInline {
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

.blockAddInner,
.blockAddInnerInline {
  position: absolute;
  /* left: 50%;
  top: 50%;
  transform: translate(-50%, -50%); */
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: lightgray;
  opacity: 0;
  transition: opacity 0.1s, background-color 0.1s;
  /* position: relative; */
}

/* .blockGroup .block:first-of-type {
  background-color: blue;
}

.blockGroup
  .block:first-of-type
  .blockAddContainerVertical
  .blockAddInnerVertical {
  background-color: blue !important;
} */

.blockAddInner {
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

.blockAddInnerInline {
  pointer-events: auto;
  /* right: 10px; */
  top: 50%;
  transform: translateY(-50%);
  /* z-index: 100; */
}

.blockAddInner:hover,
.blockAddInnerInline:hover {
  background-color: rgb(221 221 221);
  opacity: 1;
}

/* .blockAddContainerVertical:hover .blockAddInnerVertical:not(:hover) {
  opacity: 0.5;
} */

.blockAddContainerInline.show .blockAddInnerInline:not(:hover) {
  opacity: 0.5;
}

/* .blockAddInner:hover {
  background-color: rgb(221, 221, 221);
} */

.blockAddInner::before,
.blockAddInnerInline::before {
  content: "";
  position: absolute;
  background-color: rgb(64 64 64);
  height: 60%;
  width: 2px;
  left: 50%;
  top: 50%;
  border-radius: 1px;
  transform: translate(-50%, -50%);
}

.blockAddInner::after,
.blockAddInnerInline::after {
  content: "";
  position: absolute;
  background-color: rgb(64 64 64);
  width: 60%;
  height: 2px;
  left: 50%;
  top: 50%;
  border-radius: 1px;
  transform: translate(-50%, -50%);
}

.deleteBlock {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: rgb(211 211 211);
  opacity: 0.5;
  cursor: pointer;
  transition: opacity 0.1s;
}

.deleteBlock:hover {
  opacity: 1;
}

.deleteBlock::before {
  content: "";
  position: absolute;
  background-color: rgb(64 64 64);
  height: 60%;
  width: 2px;
  left: 50%;
  top: 50%;
  border-radius: 1px;
  transform: translate(-50%, -50%) rotate(45deg);
}

.deleteBlock::after {
  content: "";
  position: absolute;
  background-color: rgb(64 64 64);
  height: 60%;
  width: 2px;
  left: 50%;
  top: 50%;
  border-radius: 1px;
  transform: translate(-50%, -50%) rotate(-45deg);
}

.block:has(.deleteBlock:hover) {
  background-color: rgb(211 211 211 / 0.1);
}

.blockTypePickerWrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  left: 0;
  top: 0;
  /* top: 100%; */
  width: 100%;
  height: 100%;
  pointer-events: none;
  /* transform: translateY(-50%); */
}

.blockTypePicker {
  /* position: absolute; */
  /* left: 50%; */
  /* top: 50%; */
  /* transform: translate(-50%, -50%); */
  /* width: 100%; */
  background-color: rgb(211 211 211 / 0.1);
  display: flex;
  gap: 5px;
  padding: 4px 5px;
  border-radius: 6px;
  pointer-events: auto;
  /* max-width: 75%; */
  max-width: calc(100% - 15px);
  flex-wrap: wrap;
  justify-content: center;
}

.blockTypeOption {
  display: flex;
  cursor: pointer;
  background-color: rgb(211 211 211 / 0.2);
  padding: 3px;
  border-radius: 3px;
  transition: background-color 0.1s;
}

.blockTypeTextOption {
  padding: 3px 5px;
}

/* .blockTypeOption .blockTypeOptionInner { */
.blockTypeOption svg {
  /* line-height: 1em; */
  height: 15px;
  width: auto;
  color: rgb(211 211 211 / 0.5);
  transition: color 0.1s;
}

/* .blockTextOption,
.blockHeaderOption {
  position: absolute;
}

.blockTextOption {
  font-size: 15px;
}

.blockHeaderOption {
  font-weight: bold;
  font-size: 18px;
} */

.blockTypeOption.selected {
  background-color: rgb(211 211 211 / 0.4);
}

/* .blockTypeOption:hover .blockTypeOptionInner { */
.blockTypeOption.selected svg {
  color: rgb(211 211 211);
}

.blockTypeOption:not(.selected):hover {
  background-color: rgb(211 211 211 / 0.3);
}

/* .blockTypeOption:hover .blockTypeOptionInner { */
.blockTypeOption:not(.selected):hover svg {
  color: rgb(211 211 211 / 0.7);
}

.blockImage {
  min-height: 15px;
  padding: 15px 20px;
}

.blockImageInner {
  /* max-width: 50px; */
  max-width: min(100%, 350px);
  height: auto;
  -webkit-user-drag: none;
}

.blockImageInner.hide {
  visibility: hidden;
}

.blockImageOpenWrapper {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 50;
  background-color: rgb(0 0 0 / 0.4);
  transition: background-color 0.2s;
  animation: blockImageOpenWrapperFadeIn 0.2s;
}

.blockImageOpen {
  user-select: none;
  position: fixed;
  width: auto;
  transform: translate(-50%, -50%);
  animation: blockImageOpenToCenter forwards 0.2s;
}

.blockImageOpenWrapper.animOut {
  background-color: rgb(0 0 0 / 0);
}

.blockImageOpenWrapper.animOut .blockImageOpen {
  animation: blockImageOpenToCenterClose forwards 0.2s;
}

/* .blockImage::active {
    transform: scale(10);
    } */

.blockImageUpload {
  display: none;
}

.imageControls {
  display: flex;
  position: absolute;
  bottom: 10px;
  right: 10px;
  gap: 8px;
}

.imageControls > div {
  cursor: pointer;
}

.imageControls > div > svg {
  height: 20px;
  width: auto;
}

@keyframes blockGrowIn {
  from {
    max-height: 0;
    /* overflow: hidden; */
  }

  to {
    max-height: 60px;
    /* overflow: hidden; */
  }
}

@keyframes blockMarkerSlideIn {
  from {
    left: -10px;
  }

  to {
    left: 0;
  }
}

@keyframes blockImageOpenWrapperFadeIn {
  from {
    background-color: rgb(0 0 0 / 0);
  }
}

@keyframes blockImageOpenToCenter {
  /* from {
    max-width: 9999%;
    max-height: 9999%;
  } */

  to {
    left: 50%;
    top: 50%;
    max-width: 80%;
    max-height: 80%;
    /* transform: translate(-50%, -50%); */
  }
}

@keyframes blockImageOpenToCenterClose {
  from {
    left: 50%;
    top: 50%;
    max-width: 80%;
    max-height: 80%;
    /* transform: translate(-50%, -50%); */
  }

  /* to {
    max-width: 9999%;
    max-height: 9999%;
  } */
}
