import { app, BrowserWindow, ipcMain, Menu, session } from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// TODO: separate actual create window from dock menu/etc.
const createWindow = (): BrowserWindow => {
  // TODO: maybe make new windows offset from others
  // TODO: make a way to have multiple notes
  // TODO: save notes (probably with electron-store)
  // TODO: ensure the app works on windows

  // Create the browser window.
  const newWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    titleBarStyle: "hiddenInset",
    // titleBarStyle: "hidden",
    // trafficLightPosition: { x: 10, y: 20 },

    // background material is only supported on windows! :(
    // backgroundMaterial: "acrylic",
    // but macos has vibrancy, apparently!
    vibrancy: "popover",

    // could also use .setAlwaysOnTop() in order to set level/relativeLevel
    alwaysOnTop: true,

    // opacity: 0.5,
    transparent: true,
    visualEffectState: "active",
    // hasShadow: false,

    // focusable: false,

    minWidth: 200,
    minHeight: 150,
  });

  // and load the index.html of the app.
  newWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  return newWindow;

  // Open the DevTools.
  // mainWindow.webContents.openDevTools({ mode: "detach" }); // dev tools need to be detached with transparent window
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": [
          "default-src 'self'; script-src 'self' 'unsafe-eval'; style-src 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https://api.openai.com",
        ],
      },
    });
  });

  const dockMenu = Menu.buildFromTemplate([
    // TODO: add functionality to this button
    {
      label: "New Note",
      async click() {
        console.log("clicked!! make a new note!");
        // TODO: new windows should be blank - default blocks should only exist in first window
        let targetWindow =
          BrowserWindow.getFocusedWindow() ?? BrowserWindow.getAllWindows()[0];
        if (!targetWindow) {
          targetWindow = createWindow();
          await new Promise((resolve) =>
            targetWindow.webContents.once("did-finish-load", resolve)
          );
        }
        targetWindow.webContents.send("create-tab");
      },
    },
    {
      label: "New Window",
      click() {
        console.log("clicked!! make a new window!");
        createWindow();
      },
    },
  ]);

  app.dock.setMenu(dockMenu);

  createWindow();

  ipcMain.handle("create-window", () => createWindow());
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
